# Initialize Kubernetes with kubeadm on controller side
sudo kubeadm init --apiserver-advertise-address=10.200.3.99 --pod-network-cidr=10.244.0.0/16 # Flannel CNI plugin.
or
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 # Calico network

# Configure kubectl for the Default User
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Install Flannel CNI Plugin
kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
# Calico network
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml


# Join the node to the Kubernetes Cluster (change based on initialized info)
sudo kubeadm token create --print-join-command
e.g., sudo kubeadm join 10.200.3.99:6443 --token f7gy7a.p4x0xulpaclrofof --discovery-token-ca-cert-hash sha256:e0a79801d11a3cc27100024462067307de151b5dfe4e4ce17744a6d68ab10ab2

# Apply Deployments and Services on the Server
## configmaps
kubectl apply -f k8s/configmaps/opa-fairness-policies.yaml
kubectl apply -f k8s/configmaps/opa-reliability-policies.yaml
kubectl apply -f k8s/configmaps/opa-explainability-policies.yaml
kubectl apply -f k8s/configmaps/opa-privacy-policies.yaml
kubectl apply -f k8s/configmaps/opa-aggregator-thresholds.yaml

## Autoscaler
kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/vpa-release-1.0/vertical-pod-autoscaler/deploy/vpa-v1-crd-gen.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/autoscaler/vpa-release-1.0/vertical-pod-autoscaler/deploy/vpa-rbac.yaml
kubectl apply -f k8s/configmaps/vertical_pod_autoscaler.yaml
   kubectl get verticalpodautoscaler edge-device-vpa -o yaml

## OPA service
kubectl apply -f k8s/services/opa-service.yaml
kubectl apply -f k8s/deployments/opa-deployment.yaml

## MQTT service
kubectl apply -f k8s/configmaps/mqtt.yaml
kubectl apply -f k8s/services/mqtt_service.yaml
kubectl apply -f k8s/deployments/mqtt_deployment.yaml

## edge processing
kubectl apply -f k8s/services/edge_processing_service.yaml
kubectl apply -f k8s/deployments/edge_processing_deployment.yaml

## edge device
kubectl apply -f k8s/services/edge_device_service.yaml
kubectl apply -f k8s/deployments/edge_device_deployment.yaml

# Delete
## delete configmaps
kubectl delete -f k8s/configmaps/opa-fairness-policies.yaml
kubectl delete -f k8s/configmaps/opa-reliability-policies.yaml
kubectl delete -f k8s/configmaps/opa-explainability-policies.yaml
kubectl delete -f k8s/configmaps/opa-privacy-policies.yaml
kubectl delete -f k8s/configmaps/opa-aggregator-thresholds.yaml

## delete OPA
kubectl delete -f k8s/services/opa-service.yaml
kubectl delete -f k8s/deployments/opa-deployment.yaml

## delete edge processing
kubectl delete -f k8s/services/edge_processing_service.yaml
kubectl delete -f k8s/deployments/edge_processing_deployment.yaml

## delete edge device
kubectl delete -f k8s/services/edge_device_service.yaml
kubectl delete -f k8s/deployments/edge_device_deployment.yaml

# Verify Cluster Status
kubectl get nodes
kubectl get pods --all-namespaces
kubectl get services

kubectl describe node <>

sudo lsof -i :10250
sudo swapoff -a


# Reset the cluster, remove all cluster configurations.
   sudo kubeadm reset
   sudo rm -rf /etc/kubernetes/ /var/lib/etcd/ /var/lib/kubelet/
   sudo rm -rf ~/.kube/

   sudo rm -rf /etc/kubernetes/manifests/*.yaml


# docker builds
## Build Edge Device Image
   docker build -f docker/edge_device/Dockerfile -t edgemlops/edge-device:latest --push .

## Build Edge Processing Server Image
   docker build -f docker/edge_processing_server/Dockerfile -t edgemlops/edge-processing-server:latest --push .
   docker buildx build -f docker/edge_processing_server/Dockerfile --platform linux/amd64,linux/arm64 -t edgemlops/edge-processing-server:latest --push .

## Build Cloud Image
   docker build -f docker/cloud/Dockerfile -t edgemlops/cloud:latest --push .
   docker buildx build --platform linux/amd64,linux/arm64 -t edgemlops/cloud:latest -f docker/cloud/Dockerfile --push .

# check logs
   kubectl logs deployment/edge-processing-deployment -n default
   kubectl logs deployment/edge-processing-deployment -n default -c edge-processing --follow

   kubectl logs deployment/edge-device-deployment -n default
   kubectl logs deployment/edge-device-deployment -n default -c edge-device --follow


### To ensure that each edge-device pod runs on a separate Raspberry Pi within Kubernetes cluster
kubectl get nodes
kubectl label node [node_name] device-id=node-1
kubectl label node [node_name] device-id=node-2

kubectl get nodes --show-labels
#### check where each pod is scheduled
kubectl get pods -l app=edge-device -o wide


======
k3s
======
sudo k3s kubectl get nodes
sudo k3s kubectl get pods -A

sudo k3s kubectl apply -f k3s/configmaps/cloud-config.yaml
sudo k3s kubectl apply -f k3s/configmaps/edge-device-config.yaml
sudo k3s kubectl apply -f k3s/configmaps/mqtt-config.yaml
sudo k3s kubectl apply -f k3s/configmaps/opa-fairness-policies.yaml
sudo k3s kubectl apply -f k3s/configmaps/opa-reliability-policies.yaml
sudo k3s kubectl apply -f k3s/configmaps/opa-explainability-policies.yaml
sudo k3s kubectl apply -f k3s/configmaps/opa-privacy-policies.yaml
sudo k3s kubectl apply -f k3s/configmaps/opa-aggregator-thresholds.yaml

sudo k3s kubectl apply -f k3s/services/cloud_service.yaml
sudo k3s kubectl apply -f k3s/services/edge_processing_service.yaml
sudo k3s kubectl apply -f k3s/services/edge_device_service.yaml
sudo k3s kubectl apply -f k3s/services/mlflow_service.yaml
sudo k3s kubectl apply -f k3s/services/mqtt_service.yaml
sudo k3s kubectl apply -f k3s/services/opa_service.yaml

sudo k3s kubectl delete -f k3s/services/cloud_service.yaml

sudo k3s kubectl apply -f k3s/deployments/cloud-deployment.yaml
sudo k3s kubectl apply -f k3s/deployments/edge-processing-deployment.yaml
sudo k3s kubectl apply -f k3s/deployments/edge-device-deployment.yaml
sudo k3s kubectl apply -f k3s/deployments/mlflow-deployment.yaml
sudo k3s kubectl apply -f k3s/deployments/mqtt-deployment.yaml
sudo k3s kubectl apply -f k3s/deployments/opa-deployment.yaml

sudo k3s kubectl delete -f k3s/deployments/cloud-deployment.yaml
sudo k3s kubectl delete -f k3s/deployments/edge-device-deployment.yaml
sudo k3s kubectl delete -f k3s/deployments/edge-processing-deployment.yaml
sudo k3s kubectl delete -f k3s/deployments/mlflow-deployment.yaml
sudo k3s kubectl delete -f k3s/deployments/mqtt-deployment.yaml
sudo k3s kubectl delete -f k3s/deployments/opa-deployment.yaml


sudo k3s kubectl apply -f k3s/storage/cloud-pv.yaml
sudo k3s kubectl apply -f k3s/storage/cloud-pvc.yaml
sudo k3s kubectl apply -f k3s/storage/mlflow-pv.yaml
sudo k3s kubectl apply -f k3s/storage/mlflow-pvc.yaml

sudo k3s kubectl delete -f k3s/storage/cloud-pv.yaml
sudo k3s kubectl delete -f k3s/storage/cloud-pvc.yaml
sudo k3s kubectl delete -f k3s/storage/mlflow-pv.yaml
sudo k3s kubectl delete -f k3s/storage/mlflow-pvc.yaml

sudo k3s kubectl apply -f k3s/storage/edge-device-pv.yaml
sudo k3s kubectl apply -f k3s/storage/edge-device-pvc.yaml
sudo k3s kubectl apply -f k3s/storage/edge-device-venv-pv.yaml
sudo k3s kubectl apply -f k3s/storage/edge-device-venv-pvc.yaml

sudo k3s kubectl apply -f k3s/jobs/init-storage-dirs.yaml

sudo k3s kubectl apply -f k3s/jobs/cleanup-init-daemonset.yaml

sudo k3s kubectl get services
sudo k3s kubectl get pods --all-namespaces

sudo k3s kubectl logs [pod_name]
sudo k3s kubectl describe pod [pod_name]
sudo k3s kubectl delete pod [pod_name]

# Show all pods with their node assignments
sudo k3s kubectl get pods -o wide


